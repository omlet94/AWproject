char* inputfilename = "4k.bmp";
static unsigned char *texels;
static int width, height;
	FILE *fd;
fd = fopen(inputfilename, "rb");
	if (fd == NULL)
	{
		printf("Error: fopen failed\n");
		return 1;
	}

	unsigned char header[54];

	// Read header
	fread(header, sizeof(unsigned char), 54, fd);
	width = (int)&header[18];
	height = (int)&header[22];
// Calculate padding
	while ((width * 3 + padding) % 4 != 0)
	{
		padding++;
	}

	// Compute new width, which includes padding
	int widthnew = width * 3 + padding;
texels = (unsigned char *)malloc(width * height * 3 * sizeof(unsigned char));
if (texels == NULL)
	{
		printf("Error: Malloc failed. when you try to allocate bmp memory\n");
		return 1;
	}
// Allocate temporary memory to read widthnew size of data
	unsigned char* data = (unsigned char *)malloc(widthnew * sizeof(unsigned int));
// Read row by row of data and remove padded data.
	for (int i = 0; i < height; i++)
	{
		// Read widthnew length of data
		fread(data, sizeof(unsigned char), widthnew, fd);

		// Retain width length of data, and swizzle RB component.
		// BMP stores in BGR format, my usecase needs RGB format
		for (int j = 0; j < width * 3; j += 3)
		{
			int index = (i * width * 3) + (j);
			texels[index + 0] = data[j + 0];//r -> B
			texels[index + 1] = data[j + 1];//g -> G
			texels[index + 2] = data[j + 2];//b -> R
		}
	}

	free(data);
	fclose(fd);